Notes from the course

- React is a client-side JavaScript library 
- better for building modern, reactive user interfaces for the web
- declarative, component focused approach 
- build single-page-applications (SPAs)


React Alternatives:

Angular - complete component-based UI framework, packed with features. Uses TypeScript. Can be overkill for smaller projects.
Vue.js - complete component-based UI framework, inclues most core features. A bit less popular than React & Angular.


Components:
React allows you to build reusable and reactive components consisting of HTML, CSS, and JavaScript. 
Declarative approach is used.
Define the desired target state(s) and let React figure out the actual JavaScript DOM instructions.


Create react app:
make sure you have node.js installed

npx create-react-app name-of-app 
cd name-of-app
npm start


SRC folder:
index.js file - this is first file that the browser executes and then transforms it
The public folder index.html has one div element that hold the id of root. This is where the index.js file is rendering to the browser.

App.js file - exported to the index.js file. 


JSX:
JavaScriptXML 


Components: 
Create a component folder, and a new file for each custom component you want to make. 
Each custom component can have its own CSS file inside the component folder as well. 


Props:
Set properties of our own custom components.
They are not limited to dynamically set values. You can hard code what is needed.
For this project App.js >> passing props to ExpenseDate >> we passed through ExpenseItem